<project default="create-log-default" >

	<!-- 
	This Ant script to be called by org.fsot.CodeCoverRunner (CCR).
	It is meant to work out of the box for most Ant projects, without modifying this script.
	In the event of an atypical build, you may try modifying the targets and/or overwrite parameters.
	The parameters and targets are documented below.
	
	For Maven projects, you may try mvn ant:ant to generate an equivalent ant build.xml, 
	and use this file in FSOT. It is currently untested, do try it out and let us know if it works!	
	
	CCR retrieves project attributes and pass them to this script as parameters
	to automate the instrumentation, compilation and execution of tests.
	
	The parameters in this script are:
		- codecoverDir (property): absolute path to codecover, get environment
									variable when it is set in the shell/batch script
		- fsot-src (refid to path): A single source root directory, to be used in
									codecover instrumentation. Codecover only takes in single root
									directory to instrument at the moment. Modify the
									"instrument-sources" target below to instrument 2 or more root
									directories if necessary.
		- classpathCompile (refid to path): Classpath used to compile the instrumented source
		- classpathTest (refid to path): Classpath used to run junit tests
		- testClassName (property): name of a test class to be executed. This property will be
									overridden mutliple times for running of multiple test classes
		- junitRunnerToUse (property): takes value of either that of junit3Runner or junit4Runner
										depending on the junit version used in the project. These runners
										are from codecover, and it reports coverage at method level.
										See codecover documentation/source to adapt the TestRunner, otherwise
										any other custom TestRunner would most likely not work.
									
	See the CCR source code for more detail.
	-->

	<!-- fsot naming convention-->
	<property name="fsot-base" value="fsot-base" />
	<property name="instrumentedSourceDir" value="${fsot-base}/instrumented" />
	<property name="compiledInstrumentedDir" value="${fsot-base}/compiled-instrumented" />
	<property name="xmlcontainer" value="${fsot-base}/container.xml" />
	<property name="reporthtml" value="${fsot-base}/report.html" />

	<property name="junit3Runner" value="org.codecover.junit3.text.TestRunner" />
	<property name="junit4Runner" value="org.codecover.junit4.core.TestRunner" />
	<property name="junitRunnerToUse" value="" />

	<property name="testClassName" value="" />

	
	<!-- taskdefs -->
	<taskdef name="codecover" classname="org.codecover.ant.CodecoverTask" classpath="${codecoverDir}/lib/codecover-ant.jar" />
	<taskdef name="fsot" classname="org.fsot.report.anttask.FsotTask" />


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- clean  -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


	<target name="clean">
		<delete dir="${fsot-base}" quiet="true" />
	</target>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Instrument sources for code coverage -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


	<target name="instrument-sources" depends="clean">
		<!-- src-dir property to be set by fsot via refid fsot-src -->
		<property name="src-dir" refid="fsot-src" />
		<codecover>
			<instrument containerId="c" language="java" destination="${instrumentedSourceDir}" charset="utf-8" copyUninstrumented="false">
				<source dir="${src-dir}">
					<include name="**/*.java" />
				</source>				
			</instrument>
			<save containerId="c" filename="${xmlcontainer}" />
		</codecover>
	</target>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Compile source with instrumentation -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


	<target name="compile-instrumented" depends="instrument-sources">
		<mkdir dir="${compiledInstrumentedDir}" />
		<javac srcdir="${instrumentedSourceDir}" 
			destdir="${compiledInstrumentedDir}" 
			encoding="utf-8"
			target="1.5" 
			debug="true" 
			classpathref="classpathCompile" 
			includeAntRuntime="false" 
			fork="true">
		</javac>
	</target>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Run a single junit test against the instrumented program to create coverage log-->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


	<target name="run-instrumented">
		<path id="cp">
			
			<pathelement location="${codecoverDir}/lib/JUnit-TestRunner.jar" />
			<pathelement location="${codecoverDir}/lib/codecover-ant.jar" />
			<pathelement location="${codecoverDir}/lib/codecover-batch.jar" />
			<pathelement location="${codecoverDir}/lib/codecover-core.jar" />
			<pathelement location="${codecoverDir}/lib/codecover-instrumentation-java.jar" />
			<pathelement path="${compiledInstrumentedDir}" />
			<path refid="classpathTest"/>

		</path>
		
		<java fork="true" classname="${junitRunnerToUse}">
			<!--  JUNIT 3 org.codecover.junit3.text.TestRunner -->
			<!-- JUNIT 4 org.codecover.junit4.core.TestRunner -->
			<classpath refid="cp"/>
			<jvmarg value="-Dorg.codecover.coverage-log-file=${fsot-base}/${testClassName}.clf" />
			<arg value="-methodsAsTestCases" />
			<arg value="${testClassName}" />
		</java>
		
		<!-- Setting a flag named after the testClassName, if coverage log file is created.
			it is used to determine if target "create-log" is to be executed -->
		 <available file="${fsot-base}/${testClassName}.clf" property="${testClassName}"/>
	</target>





	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Update Container -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<!-- Default Point of Entry -->
	<target name="create-log-default" depends="compile-instrumented,create-log"/>

	<!-- Subsequent Point of Entry -->
	<target name="create-log" depends="run-instrumented" if="${testClassName}">
		
		<codecover>
			<load containerId="c" filename="${xmlcontainer}" />
			<analyze containerId="c" coverageLog="${fsot-base}/${testClassName}.clf" name="${testClassName}-Session" />
			<save containerId="c" filename="${xmlcontainer}" />
		</codecover>
	</target>

	<!-- Merge sessions into a single session -->
	<target name="merge-sessions">
		<codecover>
			<load containerId="c" filename="${xmlcontainer}" />
			<mergeSessions containerId="c" name="Test Session" removeOldSessions="true">
				<testSessions>
					<testSession pattern=".*" />
				</testSessions>
			</mergeSessions>
			<save containerId="c" filename="${xmlcontainer}" />
		</codecover>
	</target>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- Create Coverage Report -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


	<target name="generate-html-report">
		<codecover>
			<load containerId="c" filename="${xmlcontainer}" />

			<report containerId="c" destination="${reporthtml}" template="${codecoverDir}/report-templates/HTML_Report_hierarchic.xml">
				<testCases>
					<testSession pattern=".*">
						<testCase pattern=".*" />
					</testSession>
				</testCases>
			</report>
		</codecover>
	</target>

	<target name="generate-csv-report">
		<fsot>
			<CSVReport filename="${xmlcontainer}" destination="${fsot-base}/output.csv" mapping="${fsot-base}/mapping.xml"/>
		</fsot>
	</target>

</project>
